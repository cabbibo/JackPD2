#pragma kernel Flow

struct Vert{
  float3 pos;
  float3 vel;
  float3 nor;
  float3 tangent;
  float3 axis;
  float life;
};

struct Bone{
    float3 start;
    float3 end;
    float size;
    float debug;
};

float4x4 _Transform;

RWStructuredBuffer<Vert> _VertBuffer;
RWStructuredBuffer<Bone> _BoneBuffer;

int _VertBuffer_COUNT;
int _BoneBuffer_COUNT;

#include "../../Chunks/safeID.cginc"
#include "../../Chunks/snoise.cginc"
#include "../../Chunks/hash.cginc"
#include "../../Chunks/curlNoise.cginc"
#include "../../Chunks/ParticleAxisHelpers.cginc"



float map( float3 pos ){

    float d = 1000;
    for( int i = 0; i < _BoneBuffer_COUNT; i++ ){
        Bone b = _BoneBuffer[i];
        d = min( d , sdCapsule(pos , b.start, b.end, b.size));
    }
    return d;
}

float3 GetNor( float3 pos ){
  float3 eps = float3(0.0001,0,0);
  float3 nor = float3( map( pos-eps.xyy) - map( pos+eps.xyy)
                     , map( pos-eps.yxy) - map( pos+eps.yxy)
                     , map( pos-eps.yyx) - map( pos+eps.yyx));

  return normalize(nor);

}

float _Time;
void DoInit(inout Vert v , int pID){}

float3 DoRemitPosition(int p){
   return mul( _Transform, float4( hash(float(p)*20+_Time)-.5,hash(float(p)*430+_Time)-.5 , hash(float(p)*231+_Time)-.5,1)).xyz;
}

float3 DoRemitVelocity(int p){return 0;}


float3 DoForce( inout Vert vert , int pID){
    float3 force = 0;
   // force += 1.4*curlNoise(vert.pos * 1.4);
    //force +=  mul( _Transform, float4( 0,-1 ,0,0)).xyz;


    // Giving the vert a tangent
    vert.tangent =normalize(cross( vert.axis , normalize( vert.nor )));


    float d = map( vert.pos );
    float3 n = GetNor(vert.pos);




    if( d < 0.01 ){ 

        float3 oPos = vert.pos;



        vert.pos += n * (d-.01);

        
        //vert.vel = (vert.pos - oPos);// + reflect( vert.vel , n );
        
    }
    //float3 n = GetNor( vert.pos );

    //force = - t.yzw * .001 * t.x;

    
    force *= .000001 * (1+hash(pID*1021.))/2;



    
    return force;
}

float DoLife( Vert v , int pID ){
    return .0001 * (3+sin(float(pID)));
}

float DoDampening( Vert v , int pID){
    return .99;
}

#define NR_THREADS 128
[numthreads(NR_THREADS,1,1)]
void Flow(uint3 id : SV_DispatchThreadID) {
    #include "../../Chunks/SimplifiedSimulation.cginc"
}