#pragma kernel Flow



struct Vert{
  float3 pos;
  float3 vel;
  float3 nor;
  float3 tangent;
  float3 axis;
  float life;
};

float4x4 _Transform;

RWStructuredBuffer<Vert> _VertBuffer;

int _VertBuffer_COUNT;
int _TransformBuffer_COUNT;

#include "../../Chunks/safeID.cginc"
#include "../../Chunks/snoise.cginc"
#include "../../Chunks/hash.cginc"
#include "../../Chunks/curlNoise.cginc"
#include "../../Chunks/ParticleAxisHelpers.cginc"




void DoInit( inout Vert vert , float pID ){
    vert.life = hash(float(pID));
    vert.axis = newAxis(float(pID));
}

float3 DoRemitPosition(int p){
   return mul( _Transform, float4( hash(float(p)*20)-.5,0 , hash(float(p)*231)-.5,1)).xyz;
}

float3 DoRemitVelocity(int p){return 0;}


float3 DoForce( inout Vert vert , int pID){
    float3 force = 0;
    force += 1.4*curlNoise(vert.pos * .4);
    force +=  mul( _Transform, float4( 0,1 ,0,0)).xyz;
    force *= .00004 * (1+hash(pID*1021.))/2;


    vert.nor = mul(rotation(vert.axis,vert.life*10*(hash(float(pID*123))+1)),float4(0,0,1,0)).xyz;
    // Giving the vert a tangent
    vert.tangent =normalize(cross( vert.axis , normalize( vert.nor )));
    
    return force;
}

float DoLife( Vert v , int pID ){
    return .0004 * (3+sin(float(pID)));
}

float DoDampening( Vert v , int pID){
    return .98;
}

#define NR_THREADS 128
[numthreads(NR_THREADS,1,1)]
void Flow(uint3 id : SV_DispatchThreadID) {
    #include "../../Chunks/SimplifiedSimulation.cginc"
}