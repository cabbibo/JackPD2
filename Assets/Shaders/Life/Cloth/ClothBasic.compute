#pragma kernel Collision
#pragma kernel Constraint
#pragma kernel GetNormals

#include "../../Chunks/noise.cginc"
#include "../../Chunks/snoise.cginc"
#include "../../Chunks/curlNoise.cginc"


struct Vert{
  float3 pos;
  float3 oPos;
  float3 nor;
  float3 tang;
  float2 uv;
  float2 debug;
};


struct Connection{
    float id1;
    float id2;
    float length;
    float stiffness;
};


RWStructuredBuffer<Vert> _VertBuffer;
RWStructuredBuffer<Connection> _ConnectionBuffer;

uint _VertBuffer_COUNT;
uint _ConnectionBuffer_COUNT;

int _Pass;
float _PassMultiplier;

int _NumVertsX;
int _NumVertsY;


float _Time;

#include "../../Chunks/safeID.cginc"

float3 getVel( float3 p1 , float3 p2 ){

  float3 v = p1 - p2;

  if( length( v ) > .5){ v = normalize( v ) *.5; }
  return v;
  
}

#define NR_THREADS 128

[numthreads(NR_THREADS,1,1)]
void Collision (uint threadID : SV_GroupIndex, uint3 u3GroupID : SV_GroupID, uint3 id : SV_DispatchThreadID) {

  uint pID = id.x;
  if( pID < _VertBuffer_COUNT){

    pID = safeID( pID , _VertBuffer_COUNT );
    Vert vert = _VertBuffer[pID];

    float3 force = float3(0,-1.4,0);


    force += float3(0,0,3) * (noise( vert.pos * 4+ _Time )-.5) * 1.1;//curlNoise( vert.pos * 5 + _Time * .3 ) * 1.3;

    // Inertia: objects in motion stay in motion.
    float3 vel = getVel( vert.pos , vert.oPos);

    if( length( force ) > 10 ){
      force = normalize(force) * 10;
    }
 
    bool tb = false;


    // if tb than don't do the forces!
    if( pID <= _NumVertsX-1 ){
       tb = true;
       vert.pos.y = 0;
       vert.pos.z = .5;
       vert.pos.x = (float(pID) /float(_NumVertsX)) * 1;
       vert.oPos = vert.pos;
       vert.debug.x = 1;
    }else{
        vert.debug.x = 0;
    }

    if(tb == false ){

      float dampening =.99;//_Dampening;//.99999;// - vert.life * .01;
      float3 next = vert.pos + vel  * dampening+ force * .0001;

      vert.oPos = vert.pos;
      vert.pos = next;

    }

    _VertBuffer[pID] = vert;

  }
  
}



[numthreads(NR_THREADS,1,1)]
void Constraint(uint threadID : SV_GroupIndex, uint3 u3GroupID : SV_GroupID, uint3 id : SV_DispatchThreadID) {
  
  // Get the id using thread / group indices
  uint pID =  id.x;

  // Since we are doing 2 passes for verlet, multiply by 2 
  // to get both the vertices!
  pID = pID * 8;

  if( (_PassMultiplier/2) % 2 == 1 ){
    pID = pID + _Pass;
  }else{
    pID = pID + 8 -_Pass;
  }

  if( pID < uint(_ConnectionBuffer_COUNT)){
    
    Connection connection = _ConnectionBuffer[safeID(pID,_ConnectionBuffer_COUNT)];



    int id1 = int(connection.id1);
    int id2 = int(connection.id2); 


    // If we are in second pass, need to move up a row!
    if( _PassMultiplier % 2 == 1 && id1 >= 0 && id2 >= 0 ){

        id1 += _NumVertsX;
        id2 += _NumVertsX;

        // we in a right buffer,
 		// both are above, so let em go to bottoms!
 		if( id1 >= _NumVertsX * _NumVertsY && id2 >= _NumVertsX * _NumVertsY ){
 			id1 -= _NumVertsX * _NumVertsY;
 			id2 -= _NumVertsX * _NumVertsY;
 		}

        if( id1 >= _NumVertsX * _NumVertsY ){ id1 = -1; }
        if( id2 >= _NumVertsX * _NumVertsY ){ id2 = -1; }

        
    }



if( id1 >= 0 && id2 >= 0  ){


    Vert v1 = _VertBuffer[id1];
    Vert v2 = _VertBuffer[id2];
    float len = connection.length;

    float3 dif = v1.pos - v2.pos;
    float l = length( dif );// * ((4+n)/4);
    float difference = 0;
      
    // We want to make sure that l isn't zero, 
    // or we will get some NaNs
    if( l > 0.001 ){
        difference = (len-l)/l;
    }

    // Here is where the actual verlet goes down!
    float3 translate = dif * .6 * difference * _PassMultiplier;// / (1+floor(_PassMultiplier/2)* 1);
    //float3 translate = 0;// * _PassMultiplier;
    
    float3 t1 = 1 * translate;
    float3 t2 = 1 * translate;
    
    float3 n1 = v1.pos + t1;
    float3 n2 = v2.pos - t2;

    if(v1.debug.x == 1 && v2.debug.x == 1){
        v1.pos = v1.pos;
        v2.pos = v2.pos;
    }else if( v1.debug.x == 1 && v2.debug.x != 1 ){
        v1.pos = v1.pos;
        v2.pos = n2 - t2;
    }else if(v1.debug.x != 1 && v2.debug.x == 1 ){
        v1.pos = n1-t1;
        v2.pos = v2.pos;
    }else{
        v1.pos = n1;
        v2.pos = n2;
    }

    


  
    
    

    // Set both the values in the proper buffer location!
    _VertBuffer[ id1 ] = v1;
    _VertBuffer[ id2 ] = v2;
}


}






}




[numthreads(NR_THREADS,1,1)]
void GetNormals(uint threadID : SV_GroupIndex, uint3 u3GroupID : SV_GroupID, uint3 id : SV_DispatchThreadID) {

  uint pID = id.x;
  if( pID < _VertBuffer_COUNT){

    pID = safeID( pID , _VertBuffer_COUNT );
    int column = pID % _NumVertsX;
    int row  = pID / _NumVertsX;

    Vert vert = _VertBuffer[pID];

    float3 nor = 0;
    float total = 0;

    float3 p1; float3 p2;

    if( column != 0 && row != 0 ){
      p1 = _VertBuffer[ pID - 1 ].pos;
      p2 = _VertBuffer[ pID - _NumVertsX ].pos;
      nor += normalize(cross((vert.pos-p1),(vert.pos-p2)));
      total += 1;
    }


    if( column != _NumVertsX-1 && row != 0 ){
      p1 = _VertBuffer[ pID + 1 ].pos;
      p2 = _VertBuffer[ pID - _NumVertsX ].pos;
      nor += -normalize(cross((vert.pos-p1),(vert.pos-p2)));
      total += 1;
    }

    if( column != 0 && row != _NumVertsY-1 ){
      p1 = _VertBuffer[ pID - 1 ].pos;
      p2 = _VertBuffer[ pID + _NumVertsX ].pos;
      nor -= normalize(cross((vert.pos-p1),(vert.pos-p2)));
      total += 1;
    }


    if( column !=_NumVertsX-1 && row != _NumVertsY-1 ){
      p1 = _VertBuffer[ pID + 1 ].pos;
      p2 = _VertBuffer[ pID + _NumVertsX ].pos;
      nor += normalize(cross((vert.pos-p1),(vert.pos-p2)));
      total += 1;
    }


float3 tang;
if( column != _NumVertsX-1 ){
   p1 = _VertBuffer[ pID + 1 ].pos;
   tang = normalize( vert.pos - p1);
}else{
  p1 = _VertBuffer[ pID - 1 ].pos;
   tang = -normalize( vert.pos - p1);
}

    nor = normalize( nor );
    vert.nor = -nor;
    vert.tang = vert.pos - vert.oPos;//tang;

    _VertBuffer[pID] = vert;

  }
  
}