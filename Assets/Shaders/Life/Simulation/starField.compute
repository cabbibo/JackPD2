#pragma kernel StarField



struct Vert{
  float3 pos;
  float3 vel;
  float3 nor;
  float3 tangent;
  float3 axis;
  float life;
};

float4x4 _Transform;

RWStructuredBuffer<Vert> _VertBuffer;

int _VertBuffer_COUNT;
int _TransformBuffer_COUNT;

#include "../../Chunks/safeID.cginc"
#include "../../Chunks/snoise.cginc"
#include "../../Chunks/hash.cginc"
#include "../../Chunks/curlNoise.cginc"
#include "../../Chunks/ParticleAxisHelpers.cginc"

float _DT;
float _Time;



#define NR_THREADS 128
[numthreads(NR_THREADS,1,1)]
void StarField(uint3 id : SV_DispatchThreadID) {

    int pID = id.x;

  pID = safeID(pID,_VertBuffer_COUNT);
  Vert vert = _VertBuffer[pID];


  if( vert.pos.x == 0  && vert.pos.y == 0 && vert.pos.z == 0 ){
    vert.pos = float3( hash(float(pID*123+_Time))-.5 ,  hash(float(pID*500+_Time))-.5, hash(float(pID*203+_Time))+1.5 );
    vert.pos += float3( hash(float(pID*12+_Time))-.5 ,  hash(float(pID*50+_Time))-.5, hash(float(pID*20+_Time))+1.5 );
    vert.vel = float3(0,0,-.003);
    vert.life = hash(float(pID * 313));//

  }

  if( vert.life < 0 ){

    vert.pos = float3( hash(float(pID*123+_Time))-.5 ,  hash(float(pID*500+_Time))-.5, hash(float(pID*203+_Time))+1.5 );
    vert.pos += float3( hash(float(pID*12+_Time))-.5 ,  hash(float(pID*50+_Time))-.5, hash(float(pID*20+_Time))+1.5 );
    vert.vel = float3(0,0,-.003);
    vert.life = 1;//
  
  }else{

    float3 force = 0;//DoForce( vert , pID); //float3(0,0,0);

    vert.vel += force * _DT * _DT * 3000;/// * .00004 * (1+hash(pID*1021.))/2;

    vert.life -= .0003 * hash(float(pID));//DoLife( vert , pID );//.0004 * (3+sin(float(pID)));
    //vert.pos += length(a *a* .001) *vert.vel *30 * _DT  * 60;// vert.vel * a * .1;
    vert.pos += vert.vel * _DT  * 60;// vert.vel * a * .1;

    vert.vel *= 1;//DoDampening( vert , pID );

  }


  
  _VertBuffer[pID] = vert;
}