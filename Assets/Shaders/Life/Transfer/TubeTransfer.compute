#pragma kernel Straight
#pragma kernel Bell
#pragma kernel BaseWonky
#pragma kernel BaseWonkyLife
#pragma kernel Wonky
#pragma kernel Wonky2
#pragma kernel DoubleBell
#pragma kernel Tongue

struct Vert{
    float3 pos;
    float3 vel;
    float3 nor;
    float3 tangent;
    float2 uv;
    float2 debug;
};

RWStructuredBuffer<Vert> _VertBuffer;
RWStructuredBuffer<Vert> _SkeletonBuffer;

int _VertBuffer_COUNT;
int _SkeletonBuffer_COUNT;



int _NumVertsPerHair;
int _TubeWidth;
int _TubeLength;
float _Radius;

#include "../../Chunks/cubicCurve.cginc"
#include "../../Chunks/safeID.cginc"

float3 cubicFromValue( in float val , in int particleID, out float3 upPos , out float3 doPos ){

  float3 p0 = float3( 0. , 0. , 0. );
  float3 v0 = float3( 0. , 0. , 0. );
  float3 p1 = float3( 0. , 0. , 0. );
  float3 v1 = float3( 0. , 0. , 0. );

  float3 p2 = float3( 0. , 0. , 0. );

  float vPP = float(_NumVertsPerHair);

  float base = val * (vPP-1);

  int baseUp   = floor( base );
  int baseDown = ceil( base );
  float amount = base - float(baseUp);


  int bladeBase = (_NumVertsPerHair) * particleID;

  if( baseUp == 0 ){

    p0 = _SkeletonBuffer[ safeID( baseUp       + bladeBase , _SkeletonBuffer_COUNT) ].pos;
    p1 = _SkeletonBuffer[ safeID( baseDown     + bladeBase , _SkeletonBuffer_COUNT) ].pos;
    p2 = _SkeletonBuffer[ safeID( baseDown + 1 + bladeBase , _SkeletonBuffer_COUNT) ].pos;

    v1 = .5 * ( p2 - p0 );

  }else if( baseDown == vPP-1 ){

    p0 = _SkeletonBuffer[ safeID( baseUp     + bladeBase , _SkeletonBuffer_COUNT) ].pos;
    p1 = _SkeletonBuffer[ safeID( baseDown   + bladeBase , _SkeletonBuffer_COUNT) ].pos;
    p2 = _SkeletonBuffer[ safeID( baseUp - 1 + bladeBase , _SkeletonBuffer_COUNT) ].pos;

    v0 = .5 * ( p1 - p2 );

  }else{

    p0 = _SkeletonBuffer[ safeID( baseUp   + bladeBase , _SkeletonBuffer_COUNT) ].pos;
    p1 = _SkeletonBuffer[ safeID( baseDown + bladeBase , _SkeletonBuffer_COUNT) ].pos;


    float3 pMinus = float3(0,0,0);

    pMinus = _SkeletonBuffer[ safeID( baseUp   - 1 + bladeBase, _SkeletonBuffer_COUNT) ].pos;
    p2 =     _SkeletonBuffer[ safeID( baseDown + 1 + bladeBase, _SkeletonBuffer_COUNT) ].pos;

    v1 = .5 * ( p2 - p0 );
    v0 = .5 * ( p1 - pMinus );

  }

  float3 c0 = p0;
  float3 c1 = p0 + v0/3.;
  float3 c2 = p1 - v1/3.;
  float3 c3 = p1;

  float3 pos = cubicCurve( amount , c0 , c1 , c2 , c3 );

  upPos = cubicCurve( amount  + .01 , c0 , c1 , c2 , c3 );
  doPos = cubicCurve( amount  - .01 , c0 , c1 , c2 , c3 );

  return pos;

}

void GetInfo( in int id ,  
              out float3 pos , 
              out float3 z , 
              out float3 x ,  
              out float3 y , 
              out float3 nor , 
              out float3 tangent, 
              out float2 uv, 
              out float colVal , 
              out float rowVal , 
              out float angle, 
              out int particleID ){

    particleID = id / ( _TubeLength * (_TubeWidth+1));

    int idInTube = id % ( _TubeLength * (_TubeWidth+1));
    int row = idInTube / (_TubeWidth+1);
    int col = id % (_TubeWidth+1);

    rowVal =  (float(row) / float(_TubeLength-1)) ;
    colVal =  (float(col%_TubeWidth)/float(_TubeWidth)) ;

    float3 upPos; float3 doPos;

    pos = cubicFromValue( rowVal , particleID , upPos , doPos );

    z = normalize(doPos - pos);
    x = normalize(cross( z , float3(1,0,0)) );
    y = normalize(cross( x , z));


    angle = colVal * 2*3.14159;
    nor = (sin(angle) *x - cos(angle) * y);// * r;
    tangent =  normalize(cross(nor,z));
    uv = float2( rowVal , colVal + col / _TubeWidth );

}

void SetInfo( int id , float3 pos , float3 nor , float3 tangent , float2 uv,float2 debug ){
    int sID = safeID( id , _VertBuffer_COUNT );
    Vert v = _VertBuffer[sID];
     v.vel = v.pos-pos; v.pos = pos; v.nor = nor; v.tangent = tangent; v.uv = uv; v.debug = debug;
    _VertBuffer[sID] = v;
}

#define NR_THREADS 128
[numthreads(NR_THREADS,1,1)]
void DoubleBell(uint threadID : SV_GroupIndex, uint3 u3GroupID : SV_GroupID) {

    int pID = threadID + u3GroupID.x * NR_THREADS;

    float3 pos , x , y ,z, nor,tangent;float2 uv; float colVal , rowVal,angle; int particleID;
    GetInfo( pID , pos , z, x , y,nor,tangent,uv, colVal, rowVal,angle,particleID );

    float iRow = (1-rowVal);
    float r = _Radius* max(  iRow * iRow * .5 , .2+ rowVal* rowVal * 1.4);
    float3 fPos = pos + nor * r;
    float2 debug = float2(float(particleID),pID);

    SetInfo( pID , fPos , nor ,tangent , uv, debug ); 
   

}

#define NR_THREADS 128
[numthreads(NR_THREADS,1,1)]
void Bell(uint threadID : SV_GroupIndex, uint3 u3GroupID : SV_GroupID) {

    int pID = threadID + u3GroupID.x * NR_THREADS;

    float3 pos , x , y ,z, nor,tangent;float2 uv; float colVal , rowVal,angle; int particleID;
    GetInfo( pID , pos , z, x , y,nor,tangent,uv, colVal, rowVal,angle,particleID );

    float r = _Radius* (.1 + rowVal* rowVal);
    float3 fPos = pos + nor * r;
    float2 debug = float2(float(particleID),pID);

    SetInfo( pID , fPos , nor ,tangent , uv, debug ); 
   

}

#define NR_THREADS 128
[numthreads(NR_THREADS,1,1)]
void BaseWonky(uint threadID : SV_GroupIndex, uint3 u3GroupID : SV_GroupID) {

    int pID = threadID + u3GroupID.x * NR_THREADS;

    float3 pos , x , y ,z, nor,tangent;float2 uv; float colVal , rowVal,angle; int particleID;
    GetInfo( pID , pos , z, x , y,nor,tangent,uv, colVal, rowVal,angle,particleID );

    float r = _Radius* saturate(min( rowVal * 3, (1-(rowVal)* .8)));
    float3 fPos = pos + nor * r;
    float2 debug = float2(float(particleID) , rowVal);
    SetInfo( pID , fPos , nor ,tangent , uv, debug ); 
   

}


#define NR_THREADS 128
[numthreads(NR_THREADS,1,1)]
void BaseWonkyLife(uint threadID : SV_GroupIndex, uint3 u3GroupID : SV_GroupID) {

    int pID = threadID + u3GroupID.x * NR_THREADS;

    float3 pos , x , y ,z, nor,tangent;float2 uv; float colVal , rowVal,angle; int particleID;
    GetInfo( pID , pos , z, x , y,nor,tangent,uv, colVal, rowVal,angle,particleID );

    float life = _SkeletonBuffer[(_NumVertsPerHair) * particleID].debug.y;

    float r = _Radius* saturate(min( rowVal * 3, (1-(rowVal)* 1)));

    r *= life;
    float3 fPos = pos + nor * r;
    float2 debug = float2(float(particleID) , rowVal);
    SetInfo( pID , fPos , nor ,tangent , uv, debug ); 
   

}




#define NR_THREADS 128
[numthreads(NR_THREADS,1,1)]
void Wonky(uint threadID : SV_GroupIndex, uint3 u3GroupID : SV_GroupID) {

    int pID = threadID + u3GroupID.x * NR_THREADS;

    float3 pos , x , y ,z, nor,tangent;float2 uv; float colVal , rowVal,angle; int particleID;
    GetInfo( pID , pos , z, x , y,nor,tangent,uv, colVal, rowVal,angle,particleID );

    float r = _Radius* saturate(min( rowVal * 3, (1-(rowVal)* .8)));
    float3 fPos = pos + nor * r;
    float2 debug = _SkeletonBuffer[ particleID * (_NumVertsPerHair)].debug.xy;//float2(float(particleID) ,_SkeletonBuffer[particleID* (_NumVertsPerHair)].debug.y);
    SetInfo( pID , fPos , nor ,tangent , uv, debug ); 
   

}


#define NR_THREADS 128
[numthreads(NR_THREADS,1,1)]
void Straight(uint threadID : SV_GroupIndex, uint3 u3GroupID : SV_GroupID) {

    int pID = threadID + u3GroupID.x * NR_THREADS;

    float3 pos , x , y ,z, nor,tangent;float2 uv; float colVal , rowVal,angle; int particleID;
    GetInfo( pID , pos , z, x , y,nor,tangent,uv, colVal, rowVal,angle,particleID );

    float r = _Radius;
    float3 fPos = pos + nor * r;
    float2 debug = float2(float(particleID),pID);

    SetInfo( pID , fPos , nor ,tangent , uv, debug ); 
   

}


#include "../../Chunks/noise.cginc"


#define NR_THREADS 128
[numthreads(NR_THREADS,1,1)]
void Wonky2(uint threadID : SV_GroupIndex, uint3 u3GroupID : SV_GroupID) {

    int pID = threadID + u3GroupID.x * NR_THREADS;

    float3 pos , x , y ,z, nor,tangent;float2 uv; float colVal , rowVal,angle; int particleID;
    GetInfo( pID , pos , z, x , y,nor,tangent,uv, colVal, rowVal,angle,particleID );

    float iRow = (1-rowVal);
    float r = _Radius* max(  iRow * iRow * .5 , .2+ rowVal* rowVal * 1.4) * (sin( rowVal * 20)+ 2) * .5;
    float3 fPos = pos + nor * r;
    float2 debug = float2(float(particleID),pID);

    SetInfo( pID , fPos , nor ,tangent , uv, debug ); 
   

}

float smin( float a, float b, float k )
{
    float h = max( k-abs(a-b), 0.0 )/k;
    return min( a, b ) - h*h*k*(1.0/4.0);
}

float _Voice;
#define NR_THREADS 128
[numthreads(NR_THREADS,1,1)]
void Tongue(uint threadID : SV_GroupIndex, uint3 u3GroupID : SV_GroupID) {

    int pID = threadID + u3GroupID.x * NR_THREADS;

    float3 pos , x , y ,z, nor,tangent;float2 uv; float colVal , rowVal,angle; int particleID;
    GetInfo( pID , pos , z, x , y,nor,tangent,uv, colVal, rowVal,angle,particleID );

    float iRow = (1-rowVal);
    float r = _Radius * smin(  pow(iRow + -.01, .3) , rowVal + .2 , .4 ) * (1 + _Voice)/2;// max(  iRow * iRow * .5 , .2+ rowVal* rowVal * 1.4) * (sin( rowVal * 20)+ 2) * .5;
    float3 fPos = pos + nor * r * (1.3+sin( angle * 2 + 3.14 * .5));
    float2 debug = float2(float(particleID),pID);

    SetInfo( pID , fPos , nor ,tangent , uv, debug ); 
   

}